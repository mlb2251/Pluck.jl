(define-type tree (Leaf) (Node nat tree tree))

(define (all pred lst)
  (match lst
    Nil => (True)
    Cons x xs => (and (pred x) (all pred xs))))

(define (nodes tree)
  (match tree
    Leaf => (Nil)
    Node n left right =>
    (Cons n (append (nodes left) (nodes right)))))

(define (isBST tree min-val max-val)
  (match tree
    Leaf => (True)
    Node n left right =>
    (and
     (and (> n min-val)
          (< n max-val))
     (and (isBST left min-val n)
          (isBST right n max-val)))))

(define (random-tree fuel)
  (if (or (== fuel 0) (flip 0.1))
    (Leaf)
    (let ((left  (random-tree (- fuel 1)))
          (right (random-tree (- fuel 1))))
      (Node (geom 0.5) left right))))

;; Although it enjoys better constant factors than enumeration,
;; the following query is still quite slow (exponential in all 
;; of the numeric parameters).
;; The one thing that scales well is the number of samples,
;; which can be arbitrarily large.
(query
 binary-search-tree
 (let ((tree (random-tree 4)))
   (PosteriorSamples
    tree
    (and (== (length (nodes tree)) 8)
         (isBST tree 0 10))
    500)))

