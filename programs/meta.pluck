;; (define-type expr
;;   (Expr sym list))



;; (query
;;   (Marginal
;;     (eval (Expr 'Construct (Cons 'Nil (Cons (Nil) (Nil)))))))



;; (eval '(Nil))
;; (eval '(S (O)))
;; (eval '1)

;; (eval '#1)
;; (eval 'x)


;; fn generating a random list of nats
(define (rnat)
  (if (flip 0.5) (O) (S (rnat))))
(define (rlist)
  (if (flip 0.5) (Nil) (Cons (rnat) (rlist))))

;; fn generating the code for a random list of nats as constants
(define (rnat_code)
  (if (flip 0.5) `(O) `(S ~(rnat_code))))

(define (rlist_code)
  (if (flip 0.5) `(Nil) `(Cons ~(rnat_code) ~(rlist_code))))

;; forward declaration
(define (nat-exp) (Unit))

;; writing a basic DSL
(define (nat-term)
  (if (flip 0.2) `(O) `(S ~(nat-term))))

(define (nat-nonterm)
  (discrete
   (`(+ ~(nat-exp) ~(nat-exp)) 0.5)
   (`(- ~(nat-exp) ~(nat-exp)) 0.5)))

(define (nat-exp)
  (discrete
   ((nat-term) 0.7)
   ((nat-nonterm) 0.3)))

(query
 test-nat-exp-sampling
 (let ((e (nat-exp)))
   (PosteriorSamples
    e
    true
    1)))

(query
 test-nat-exp-eval
 (let ((e (nat-exp)))
   (PosteriorSamples
    (Pair e (eval e))
    true
    20)))

(query
 (Marginal
  (< 5 (eval (nat-term)))))

;; forward declaration
(define (nat-exp-depth) (Unit))

;; writing a basic DSL
(define (nat-term-depth)
  (if (flip 0.2) `(O) `(S ~(nat-term-depth))))

(define (nat-nonterm-depth max-depth)
  `(+ ~(nat-exp-depth max-depth) ~(nat-exp-depth max-depth)))

(define (nat-exp-depth max-depth)
  (match max-depth
    O => (nat-term-depth)
    S n => (discrete
                    ((nat-term-depth) 0.7)
                    ((nat-nonterm-depth n) 0.3))))

(query
 (Marginal
  (< 5 (eval (nat-exp-depth 5)))))



;; DSL with variables

(define (ctx-empty) (Nil))
(define (ctx-add ctx key value) (Cons (Pair key value) ctx))
(define (ctx-filter ctx key)
  (filter (fn pair -> (native_eq (fst pair) key)) ctx))
(define (ctx-has ctx key)
  (any (fn pair -> (native_eq (fst pair) key)) ctx))

;; sample from a uniform distribution over the values in ctx
(define (ctx-uniform ctx key)
  (snd (sample-seq (normalize-seq (make-uniform (ctx-filter ctx key))))))


(query
 (Marginal
  (sample-seq (normalize-seq (make-uniform [1, 2, 3])))))

(query
 (Marginal
  (let ((ctx (ctx-empty))
        (ctx (ctx-add ctx 'nat-term `0))
        (ctx (ctx-add ctx 'nat-term `1)))
    (ctx-uniform ctx 'nat-term))))


;; forward declaration
(define (nat-exp-var) (Unit))

(define (nat-const ctx)
  (if (flip 0.5) `(O) `(S ~(nat-const ctx))))

(define (nat-term-var ctx)
  (if (and (ctx-has ctx 'nat-term) (flip 0.5)) ;; if there's a nat-term in the context, and the coin flip works out
    (ctx-uniform ctx 'nat-term) ;; then sample from the context
    (nat-const ctx))) ;; otherwise generate a constant

(define (nat-nonterm-var ctx)
  (discrete
    ;; let-statement adds x to the ctx
    (`(let ((x ~(nat-exp-var ctx))) ~(nat-exp-var (ctx-add ctx 'nat-term `x))) 0.4)
    (`(+ ~(nat-exp-var ctx) ~(nat-exp-var ctx)) 0.3)
    (`(- ~(nat-exp-var ctx) ~(nat-exp-var ctx)) 0.3)))

(define (nat-exp-var ctx)
  (discrete
    ((nat-term-var ctx) 0.7)
    ((nat-nonterm-var ctx) 0.3)))


;; sample some expressions
(query
 (PosteriorSamples
  (nat-exp-var (ctx-empty))
  true
  20))




